In many ways, systemd-nspawn is similar to chroot, but is much more powerful. It virtualizes the file system, process tree, and inter-process communication of the guest system. Much of its appeal lies in the fact that it provides a number of tools, such as machinectl, for managing containers. Containers run by systemd-nspawn will integrate with the systemd components running on the host system. As an example, journal entries can be logged from a container in the host system’s journal.

Install systemd nspawn :
apt install -y debootstrap systemd-container

Useful links :
https://www.freedesktop.org/software/systemd/man/systemd.nspawn.html#
https://www.freedesktop.org/software/systemd/man/systemd.nspawn.html
https://wiki.archlinux.org/index.php/Systemd-nspawn


Debootstrap a OS
Path: /var/lib/machines
debootstrap --variant=minbase --include=systemd,dbus,curl,gnupg,iproute2,net-tools,vim --arch amd64 stretch /var/lib/machines/CONTAINER http://reg.digikala.com/debian/

Override systemd container
You can change settings of a container with a systemd drop-in like capabilties
Path: /etc/systemd/nspawn/CONTAINER.nspawn
Content:
[Exec]
Capability=CAP_NET_BIND_SERVICE
PrivateUsers=no
[Network]
Private=no
VirtualEthernet=no

Manage the container
systemctl start systemd-nspawn@CONTAINER
systemctl stop systemd-nspawn@CONTAINER
systemctl restart systemd-nspawn@CONTAINER # May not work because systemd bug, it doesn’t wait enough to shutdown the container

Access to the container
machinectl list
machinectl shell CONTAINER /bin/bash
